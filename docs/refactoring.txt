Class-level Refactoring Report
==========

For each refactoring opportunity , please provide the following information:
    - where the issue is
    - what SOLID principle (if any) are violated
    - whether a class implementation or class interface refactoring
      is needed
    - a brief description of each issue
    - how to fix the issue

CLASS-LEVEL REFACTORING IMPLEMENTED

Refactoring 0:
  Location: User.java
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: class implementation was needed
	Cause: User.java handles relationships between user, this violates the Single Responsibility Principle principal as
	User is handling both User creation and storage, and managing the relationship functions between the Users
	Fix: refactor relationship functions (i.e friending a user and associated functions) into their own classes.

Refactoring 1:
  Location:User.java
	SOLID principle: Open/Closed principle
	class implementation or class interface: Class interface
	Cause: Friend status are directly tied to the structure of User objects (hash maps) meaning to add more types of
	relationships between users as specified we would need to changed how users store other user information
    Fix: add an abstract over User which can handle data management instead of it being managed by both User.java and
    FriendMaker.java
CLASS-LEVEL REFACTORING SUGGESTED BUT NOT IMPLEMENTED

Refactoring 2:
  Location: FriendMaker.java
	SOLID principle:Single Responsibility Principle
	class implementation or class interface: class interface would be needed
	Cause: FriendMaker has two responsibilities: handling friend functions and follow functions
	Fix: adding and abstract super class for both the friend functions and the follow functions

Refactoring 3:
  Location:FriendRecommender
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: class implementation would be needed
	Cause: FriendRecommender.java handles both input and recommending friends/follows
	Fix: add a class to handle input and to use FriendRecommender.java instead

